# Spring Cloud 구성이나 복잡한 설정이 요구될 때 YAML이 더 유리 (properties보다..)

server.port=8081
server.servlet.context-path=/boot
logging.level.org.hibernate=info

# 데이터베이스 설정(DataSource)
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://localhost:5432/smgSPBDB
spring.datasource.username=shinmingi
spring.datasource.password=4260

# Mapper Interface의 구현체: SqlSessionFactoryBean
# Spring JPA(JDBC -> API) Interface의 구현체: Hibernate (ORM, Object-Relational Mapping 프레임워크) (SQL Query를 자동 생성)

# Hibernate가 사용하는 SQL Dialect 설정 (dialect: 언어)
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# 스키마 생성 (개발환경: create, update / 운영환경: none, validate)
spring.jpa.hibernate.ddl-auto=create

# 스키마 네이밍 전략: 카멜, 스네이크
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# Hibernate가 실행하는 SQL 쿼리를 로그에 출력하도록 설정
spring.jpa.show-sql=true
# 로그 기능을 활성화한 뒤 SQL을 보기 좋게 정렬
spring.jpa.properties.hibernate.format_sql=true

# SQL 초기화 always 실행
spring.sql.init.mode=always

# JSP View 경로 설정
spring.mvc.view.prefix=/WEB-INF/
spring.mvc.view.suffix=.jsp

# 정적 리소스를 제공할 URL 패턴: 스프링부트에서는 자동이지만 사용자 정의도 가능
spring.mvc.static-path-pattern=/resources/**

# 스프링부트 기본 로깅 설정
logging.level.org.springframework=INFO
logging.level.com.example=INFO

# Spring Security 디버깅 로그 설정
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.oauth2=DEBUG

# 세션 설정
server.servlet.session.timeout=1h

# 시크릿 키 (JWT) (.env 나 AWS Secrets manager 에 저장 추천)
spring.jwt.mysecret=shinmingiissofuckinghandsomewonderfulgreatfantstic
